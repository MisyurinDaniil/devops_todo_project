# =========================
# Reverse proxy + Load balancer для Django
# Работает с docker compose (масштабируем backend: --scale backend=2)
# =========================

# Docker embedded DNS. В bridge-сети Docker DNS доступен по 127.0.0.11
# valid=10s — как часто переосвежать кэш; ipv6=off — чтобы не было сюрпризов в dev-сетях
resolver 127.0.0.11 valid=10s ipv6=off;

# Группа upstream — сюда Nginx будет проксировать запросы
upstream django_upstream {
    # ОБЯЗАТЕЛЬНО при runtime-резолвинге (resolve/переменные в server)
    # Имя зоны "django", размер 64k обычно достаточно (хранит состояние апстрима).
    zone django 64k;
    
    # Алгоритм балансировки. least_conn — отправляем туда, где меньше активных коннектов
    # (можно убрать — будет round robin по умолчанию; для липких сессий)
    least_conn;

    # ВАЖНО: backend — это имя сервиса из docker-compose.
    # resolve говорит Nginx периодически резолвить DNS-имя (получит все A-записи — по 1 на реплику).
    server backend:8000 resolve;
}

server {
    # Публичная точка входа
    listen 80;
    server_name _;   # любой хост

    # --- Базовая прокси-конфигурация ---
    location / {
        proxy_pass http://django_upstream;

        # Пробрасываем оригинальные заголовки клиента в приложение
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Таймауты — подстройте под своё приложение
        proxy_connect_timeout 5s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;
    }

    # --- Разрешить Prometheus звать /metrics ---
    location = /metrics {
        proxy_pass http://django_upstream/metrics;
        # allow 127.0.0.1;
        allow 172.0.0.0/8;        
        deny all;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # встроенная метрика самого Nginx, отдающая счётчики
    # Экспортер nginxinc/nginx-prometheus-exporter именно парсит этот вывод 
    # по адресу /nginx_status и конвертирует его в Prometheus-метрики:
    location = /nginx_status {
        stub_status;
        allow 127.0.0.1;
        allow 172.0.0.0/8;
        deny all;
    }

    # Возвращает 200 OK, если Nginx жив
    location /nginx-health {
        return 200 "ok\n";
        add_header Content-Type text/plain;
    }
}

